# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  access_token: String!
  user: User!
}

type Author {
  email: String!
  id: ID!
  name: String
}

type Comment {
  createdAt: DateTime!
  id: ID!
  text: String!
  user: Author!
}

input CommentCreateInput {
  recipeId: Int!
  text: String!
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Ingredient {
  id: ID!
  name: String!
  quantity: String
}

input IngredientCreateInput {
  name: String!
  quantity: String
}

type Instruction {
  id: ID!
  step: Float!
  text: String!
}

input InstructionCreateInput {
  step: Int!
  text: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addComment(input: CommentCreateInput!): Comment!
  addRating(input: RatingCreateInput!): Rating!
  createRecipe(input: RecipeCreateInput!): Recipe!
  deleteRecipe(id: Int!): Int!
  followUser(followingId: Int!): User!
  login(input: LoginInput!): AuthPayload!
  register(input: UserCreateInput!): User!
  unfollowUser(followingId: Int!): User!
  updateRecipe(input: RecipeUpdateInput!): Recipe!
}

type Query {
  recipe(id: Int!): Recipe
  recipes: [Recipe!]!
}

type Rating {
  id: ID!
  recipe: Recipe!
  user: UserForRating!
  value: Int!
}

input RatingCreateInput {
  recipeId: Int!
  userId: Int!
  value: Int!
}

type Recipe {
  author: Author!
  cookingTime: Float
  cuisine: String
  description: String
  difficulty: String
  id: ID!
  ingredients: [Ingredient!]!
  instructions: [Instruction!]!
  title: String!
}

input RecipeCreateInput {
  authorId: Int
  cookingTime: Int
  cuisine: String
  description: String!
  difficulty: String
  ingredients: [IngredientCreateInput!]!
  instructions: [InstructionCreateInput!]!
  title: String!
}

input RecipeUpdateInput {
  cookingTime: Int
  cuisine: String
  description: String
  difficulty: String
  id: Int!
  title: String
}

type User {
  email: String!
  followers: [User!]
  following: [User!]
  id: ID!
  name: String
  recipes: [Recipe!]!
}

input UserCreateInput {
  email: String!
  name: String
  password: String!
}

type UserForRating {
  email: String!
  id: ID!
  name: String
}